import os
import sys
import hashlib
import shutil
import datetime

# === –°–∏–≥–Ω–∞—Ç—É—Ä—ã –∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã ===
MD5_SIGNATURES = {
    "e99a18c428cb38d5f260853678922e03": "Test Trojan",
    "44d88612fea8a8f36de82e1278abb02f": "EICAR Test File"
}

SUSPICIOUS_KEYWORDS = [
    "eval(",
    "exec(",
    "os.system(",
    "subprocess.",
    "socket.",
    "base64.b64decode(",
    "requests.get(",
    "urllib.request.urlopen(",
    "compile(",
]

QUARANTINE_FOLDER = "quarantine"
LOG_FILE = "scan_log.txt"

# === –£—Ç–∏–ª–∏—Ç—ã ===

def calculate_md5(filepath):
    try:
        with open(filepath, "rb") as f:
            md5 = hashlib.md5()
            for chunk in iter(lambda: f.read(4096), b""):
                md5.update(chunk)
            return md5.hexdigest()
    except Exception as e:
        return None

def log(message):
    with open(LOG_FILE, "a") as log_file:
        log_file.write(f"[{datetime.datetime.now()}] {message}\n")

def quarantine(file_path):
    if not os.path.exists(QUARANTINE_FOLDER):
        os.makedirs(QUARANTINE_FOLDER)
    try:
        filename = os.path.basename(file_path)
        dest_path = os.path.join(QUARANTINE_FOLDER, filename)
        shutil.move(file_path, dest_path)
        log(f"–§–∞–π–ª {file_path} –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω.")
        return dest_path
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞: {e}")
        return None

# === –ü—Ä–æ–≤–µ—Ä–∫–∏ ===

def scan_file(filepath):
    results = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ MD5
    md5 = calculate_md5(filepath)
    if md5 in MD5_SIGNATURES:
        results.append(f"MD5-—Å–∏–≥–Ω–∞—Ç—É—Ä–∞: {MD5_SIGNATURES[md5]}")

    try:
        with open(filepath, "r", errors='ignore') as f:
            content = f.read()
            for keyword in SUSPICIOUS_KEYWORDS:
                if keyword in content:
                    results.append(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {keyword}")
    except Exception:
        pass

    return results

def scan_directory(path):
    infected = {}
    for root, dirs, files in os.walk(path):
        for file in files:
            full_path = os.path.join(root, file)
            threats = scan_file(full_path)
            if threats:
                infected[full_path] = threats
    return infected

# === –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===

def main():
    print("üõ°Ô∏è  Anti-Guardian: Python Antivirus")
    print("–ê–≤—Ç–æ—Ä: Harvard Startup Candidate\n")

    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python anti_guardian.py <–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è>")
        return

    path = sys.argv[1]
    if not os.path.isdir(path):
        print("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π.")
        return

    log(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ –≤: {path}")
    threats = scan_directory(path)

    if not threats:
        print("‚úÖ –£–≥—Ä–æ–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        log("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: —É–≥—Ä–æ–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–≥—Ä–æ–∑—ã:")
        for file, detections in threats.items():
            print(f"\n[!] –§–∞–π–ª: {file}")
            for item in detections:
                print(f"  - {item}")
            quarantined_path = quarantine(file)
            if quarantined_path:
                print(f"  ‚Üí –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω: {quarantined_path}")
        log(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(threats)} –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")

if __name__ == "__main__":
    main()
